1.中间件、流水线
2.数据交互
3.cookie、session
4.Router
5.模板

--------------------------------------------------------------------------------

KOA v1    generator
KOA v2    generator/async
KOA v3    async

--------------------------------------------------------------------------------

express   非破坏式
koa       破坏式

express   不依赖router
koa       强依赖router

express:
  server.get('/', function (req, res, next){});

koa1:
  server.use(function *(ctx, next){});

koa3:
  server.use(async (ctx, next)=>{});

--------------------------------------------------------------------------------

koa：
1.异步更简单——async
2.
  (req, res, next)
  (ctx, next)

  ctx.request
    ctx.request.method
    ctx.request.url
    ctx.request.header/headers

  ctx.response
    ctx.response.status=xxx     状态码
    ctx.response.body=xxx       返回内容

3.koa强依赖router
  const router=require('koa-router');

  let r1=router();
  server.use(r1.routes());

  r1.get('xxx', async);
  r1.post('xxx', async);
  r1.use('xxx', async);
  r1.put('xxx', async);
  r1.delete('xxx', async);
  ...

4.静态资源
  koa-static        ×
  koa-static-cache  √

  server.use(staticCache('路径'));

5.请求数据
  GET         ctx.request.query
    路由参数   ctx.params
  POST/文件
    server.use(convert(betterBody({
      uploadDir:      '路径',
      keepExtensions: bool
    })));

    ctx.request.fields        数据+文件信息
    ctx.request.files         文件信息(全)

6.cookie
  ctx.cookies.get(name)
  ctx.cookies.set(name, val, options)
    options:
      maxAge        毫秒单位时间
      expires       Date对象
      path
      domain

7.session     koa-session
  server.use(session({}, server));

  ctx.session

--------------------------------------------------------------------------------

                        缓存
express-static          ×/√
express-static-cache    √
express.static          √

koa-static              ×
koa-static-cache        √

--------------------------------------------------------------------------------
