ES6：
1.promise
2.generator
3.async/await

--------------------------------------------------------------------------------

promise：解决异步操作

同步——串行    简单、方便
异步——并发    性能高、体验好

--------------------------------------------------------------------------------

//异步：
$.ajax({
  url: '/banner_data',
  success(banners){
    $.ajax({
      url: '/user_data',
      success(user){
        $.ajax({
          url: '/item_data',
          success(items){
            $.ajax({
              url: '/news_data',
              success(news){

              },
              error(){
                alert('数据获取失败');
              }
            });
          },
          error(){
            alert('数据获取失败');
          }
        });
      },
      error(){
        alert('数据获取失败');
      }
    });
  },
  error(){
    alert('数据获取失败');
  }
});

//Promise
Promise.all([
  $.ajax('/banner_data'),
  $.ajax('/item_data'),
  $.ajax('/user_data'),
  $.ajax('/news_data'),
]).then(arr=>{
  let [banners, items, user, news]=arr;
}, ()=>{});

//同步
let banners=$.ajax({url: '/banner_data'});
let items=$.ajax({url: '/item_data'});
let user=$.ajax({url: '/user_data'});
let news=$.ajax({url: '/news_data'});

--------------------------------------------------------------------------------

用同步的方式去写异步：
Promise

--------------------------------------------------------------------------------

本地物理地址        c:\wamp\www\
本地网络地址        http://localhost/


C:\wamp\www\2018-1-13\promise怎么用.html
http://localhost/2018-1-13/promise怎么用.html

--------------------------------------------------------------------------------

1.服务器怎么用
  i.东西放www里面
  ii.路径转换
    c:\wamp\www\      ->    http://localhost/

2.Promise用法
  let p=new Promise((resolve, reject)=>{
    resolve();

    reject();
  });

  p.then(()=>{}, ()=>{});

--------------------------------------------------------------------------------

1.Proimse有用——解除异步操作
2.Promise有局限——带逻辑的异步操作麻烦

--------------------------------------------------------------------------------

Promise.all();      与：所有的都成功
Promise.race();     或：只要有一个完成

--------------------------------------------------------------------------------

Promise好、对逻辑操作麻烦

--------------------------------------------------------------------------------

generator-生成器
能暂停

--------------------------------------------------------------------------------

yield：
1.参数      function (a, b, c)
2.返回      return

--------------------------------------------------------------------------------

generator+promise配合：
1.外来的runner辅助执行——不统一、不标准、性能低
2.generator函数不能写成=>

--------------------------------------------------------------------------------

async/await

function *xxx(){
  ....

  let res=yield xx;

  ....

  let res2=yield xxx;

  ....
}

async function xxx(){
  ....

  let res=await xx;

  ....

  let res2=await xxx;

  ....
}


--------------------------------------------------------------------------------

async/await

async function (){
  ...
  ...

  let 结果=await 异步操作-promise、generator、另一个async函数;

  ...
  ...
  ...
}

--------------------------------------------------------------------------------

let res=await
res=>undefined

resolve();

--------------------------------------------------------------------------------

Promise
generator
async/await

--------------------------------------------------------------------------------

ES6编译：
ES6 -> ES5

babel

--------------------------------------------------------------------------------

Node：中间层
1.web后台(小规模)
2.工具              √

--------------------------------------------------------------------------------

babel：polyfill工具

babel——ES6->ES5

--------------------------------------------------------------------------------

http://nodejs.org/
node：语言、环境、平台
npm：node package manager

http://babeljs.io/

--------------------------------------------------------------------------------

npm包管理：
1.自动下载、升级
2.自动下载依赖包

--------------------------------------------------------------------------------

npm原版慢
cnpm淘宝源：http://npm.taobao.org/


1.安装Node
2.配cnpm源
3.cnpm init

--------------------------------------------------------------------------------

preset-预设

--------------------------------------------------------------------------------

http原理、Ajax、跨域、jsonp、WebSocket(Node)

browerify















                ╭═══════════════╮
                ║         吾爱程序猿论坛       ║
  ╭══════┤     www.52programer.com      ├═══════╮
  ║            ║  专注于优质IT教程收集与分享  ║              ║
  ║            ╰═══════════════╯              ║
　║                                                            ║
  ║                                                            ║
　║    说明：本站仅为资源分享的平台，教程、软件、程序等均      ║
　║          来自于互联网及网友分享，版权归原作者所有,         ║ 
　║  	      站内资源仅供参考和学习之用，不得用于商业用途，    ║
　║          下载后请在24小时内自行删除。本站不承担任何        ║
　║          技术及版权问题。                                  ║
  ║                                                            ║
  ║     1.请遵守中华人民共和国相关法律、条例。                 ║
  ║     2.本站提供的各类教程、文章及软件等，只可研究学习，     ║
  ║       本站对使用这些工具（教程）而导致的一切后果，不承担   ║
  ║       任何责任。                                           ║
  ║     3.本站不保证提供的资源十分安全或是完全可用，请下载后   ║
  ║       自行检查。                                           ║
  ║     4.如不同意以上声明，请立即删除，不要使用，谢谢合作。   ║
  ║                                                            ║
  ║    ╭───────────────────────╮      ║
  ╰══┤  吾爱程序猿论坛         版权所有 禁止盗用    ├══╯
        ╰───────────────────────╯ 

  ────────────────────────────────
             新闻 网页 贴吧 知道 MP3 图片 视频

      ┏━━━━━━━━━━━━━━━┑┌─────┒
      ┃          吾爱程序猿论坛        │ 百度一下 ┃
      ┖───────────────┘┕━━━━━┛

  ────────────────────────────────

 ╭══════════════════════════════╮
 ║  吾爱程序猿论坛专注于优质IT教程收集与分享。收集整理的都是  ║
 ║  网上最新最有价值的IT教程、精品源码以及完整系统的学习资料。║
 ║  让大家在学习的道路上少走弯路，少花冤枉钱，帮助大家真真正  ║
 ║  正学到技术!                                               ║
 ║  只要有大家的支持，我们会做得更好！                        ║
 ║                                                            ║
 ║                  www.52programer.com                       ║
 ╰══════════════════════════════╯  

              吾爱程序猿论坛官网:www.52programer.com

              默认解压密码:www.52programer.com