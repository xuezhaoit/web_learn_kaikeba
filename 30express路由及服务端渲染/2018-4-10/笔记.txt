1.express结构
  中间件

2.数据
  req.query
  bodyParser    普通post
  multer        文件post

3.cookie、session
  cookieParser
  cookieSession

4.路由——前端、后端
  拆分

  定义：根据地址(url)不同，调用不同的代码

5.服务端渲染
  后端渲染(组装)：html生成出来
  前端渲染(组装)：html生成出来
  浏览器渲染：
    输入url -> 加载 -> html,css,js,img,... -> 渲染(画)

    渲染和性能的关系

--------------------------------------------------------------------------------

模块化：
所有语言(除JS之外)都有模块系统

1.前端
  传统——requireJS-AMD、seaJS-CMD
    CMD——公共模块定义
      命名空间
    AMD——异步模块定义
      CMD+异步
  现代——vue、angular、react
2.后端
  Node模块系统

WebPack——工具
打包

--------------------------------------------------------------------------------

function xxx(){
  return {
    a: 12,
    b: 5
  };
}

...

...

let mod=xxx();

--------------------------------------------------------------------------------

1.创建
  let router=express.Router();

2.给路由填东西
  router.get('地址', ()=>{});
  router.post('地址', ()=>{});
  router.use('地址', ()=>{});

3.添加到父级
  server.use('路径', router);
  parentRouter.use('路径', router);

--------------------------------------------------------------------------------

路由写不难，难在规划

--------------------------------------------------------------------------------

后台渲染    优点：稳定、安全、利于SEO
   vs
前台渲染    优点：体积更小、灵活、体验好

--------------------------------------------------------------------------------

后台渲染页面加载速度快是不？

--------------------------------------------------------------------------------

/article/43423423       优点：路由、利于SEO、SPA
  req.params

/article?id=4412434     优点：灵活
  req.query


/article/:a/:b/:c/      都得有
/article?a=xxx&c=xxx    可省略

--------------------------------------------------------------------------------

pug   破坏式——破坏HTML
1.缩进规定层级

ejs   非破坏式——保留HTML结构
1.输出
  转义输出    <%= %>
  非转义输出  <%- %>
